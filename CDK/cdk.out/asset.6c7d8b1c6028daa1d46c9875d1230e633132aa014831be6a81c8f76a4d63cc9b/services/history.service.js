"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryService = void 0;
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
class HistoryService {
    static async getLoanHistoryByID(loanID) {
        const params = {
            TableName: process.env.LOANS_TABLE,
            FilterExpression: 'begins_with(#loanID, :loanID) And #historyLoanId=:historyLoanId',
            ExpressionAttributeValues: {
                ':loanID': 'HISTORY',
                ':historyLoanId': loanID
            },
            ExpressionAttributeNames: {
                '#loanID': 'loanID',
                '#historyLoanId': 'historyLoanId'
            },
        };
        try {
            console.log("inside getLoanHistoryByID");
            const data = await docClient.scan(params).promise();
            console.log("outSide getLoanHistoryByID");
            return data.Items;
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
    static async updateHistory(loanID, interestPaid, dateOfPaid) {
        try {
            console.log("inside updateHistory");
            const historyData = await this.getLoanHistoryByID(loanID);
            const items = {
                loanID: "HISTORY-" + loanID + "-" + (10000 + historyData.length + Math.floor(Math.random() * 100)),
                interestPaid: interestPaid,
                historyLoanId: loanID,
                date: dateOfPaid
            };
            const params = {
                TableName: process.env.LOANS_TABLE,
                Item: items
            };
            await docClient.put(params).promise();
            console.log("outside updateHistory");
            return [];
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
}
exports.HistoryService = HistoryService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGlzdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEQsTUFBYSxjQUFjO0lBRXZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBYztRQUMxQyxNQUFNLE1BQU0sR0FBRztZQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7WUFDbEMsZ0JBQWdCLEVBQUUsaUVBQWlFO1lBQ25GLHlCQUF5QixFQUFFO2dCQUMzQixTQUFTLEVBQUUsU0FBUztnQkFDcEIsZ0JBQWdCLEVBQUUsTUFBTTthQUN2QjtZQUNELHdCQUF3QixFQUFFO2dCQUMxQixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsZ0JBQWdCLEVBQUUsZUFBZTthQUNoQztTQUNKLENBQUE7UUFDRCxJQUFJO1lBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sSUFBSSxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDMUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3JCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBYyxFQUFFLFlBQW9CLEVBQUUsVUFBa0I7UUFFL0UsSUFBSTtZQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxNQUFNLEtBQUssR0FBRztnQkFDVixNQUFNLEVBQUUsVUFBVSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDbEcsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLGFBQWEsRUFBRSxNQUFNO2dCQUNyQixJQUFJLEVBQUUsVUFBVTthQUNuQixDQUFBO1lBQ0QsTUFBTSxNQUFNLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztnQkFDbEMsSUFBSSxFQUFFLEtBQUs7YUFDZCxDQUFBO1lBQ0QsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNyQyxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0NBQ0o7QUFqREQsd0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5leHBvcnQgY2xhc3MgSGlzdG9yeVNlcnZpY2Uge1xuXG4gICAgc3RhdGljIGFzeW5jIGdldExvYW5IaXN0b3J5QnlJRChsb2FuSUQ6IHN0cmluZyl7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuTE9BTlNfVEFCTEUsXG4gICAgICAgICAgICBGaWx0ZXJFeHByZXNzaW9uOiAnYmVnaW5zX3dpdGgoI2xvYW5JRCwgOmxvYW5JRCkgQW5kICNoaXN0b3J5TG9hbklkPTpoaXN0b3J5TG9hbklkJyxcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAgICc6bG9hbklEJzogJ0hJU1RPUlknLFxuICAgICAgICAgICAgJzpoaXN0b3J5TG9hbklkJzogbG9hbklEXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICAgICAnI2xvYW5JRCc6ICdsb2FuSUQnLFxuICAgICAgICAgICAgJyNoaXN0b3J5TG9hbklkJzogJ2hpc3RvcnlMb2FuSWQnXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluc2lkZSBnZXRMb2FuSGlzdG9yeUJ5SURcIik7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZG9jQ2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm91dFNpZGUgZ2V0TG9hbkhpc3RvcnlCeUlEXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuSXRlbXM7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlSGlzdG9yeShsb2FuSUQ6IHN0cmluZywgaW50ZXJlc3RQYWlkOiBudW1iZXIsIGRhdGVPZlBhaWQ6IHN0cmluZyl7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5zaWRlIHVwZGF0ZUhpc3RvcnlcIik7XG4gICAgICAgICAgICBjb25zdCBoaXN0b3J5RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TG9hbkhpc3RvcnlCeUlEKGxvYW5JRCk7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHtcbiAgICAgICAgICAgICAgICBsb2FuSUQ6IFwiSElTVE9SWS1cIiArIGxvYW5JRCArIFwiLVwiICsgKDEwMDAwICsgaGlzdG9yeURhdGEubGVuZ3RoICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSksXG4gICAgICAgICAgICAgICAgaW50ZXJlc3RQYWlkOiBpbnRlcmVzdFBhaWQsXG4gICAgICAgICAgICAgICAgaGlzdG9yeUxvYW5JZDogbG9hbklELFxuICAgICAgICAgICAgICAgIGRhdGU6IGRhdGVPZlBhaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkxPQU5TX1RBQkxFLFxuICAgICAgICAgICAgICAgIEl0ZW06IGl0ZW1zXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBkb2NDbGllbnQucHV0KHBhcmFtcykucHJvbWlzZSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJvdXRzaWRlIHVwZGF0ZUhpc3RvcnlcIik7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59Il19