"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryService = void 0;
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
class HistoryService {
    static async getLoanHistoryByID(loanID) {
        const params = {
            TableName: process.env.LOANS_TABLE,
            FilterExpression: 'begins_with(#loanID, :loanID) And #historyLoanId=:historyLoanId',
            ExpressionAttributeValues: {
                ':loanID': 'HISTORY',
                ':historyLoanId': loanID
            },
            ExpressionAttributeNames: {
                '#loanID': 'loanID',
                '#historyLoanId': 'historyLoanId'
            },
        };
        try {
            console.log("inside getLoans");
            const data = await docClient.scan(params).promise();
            console.log("outSide getloans", data.Items);
            return data.Items;
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
    static async updateHistory(loanID, interestPaid) {
        try {
            console.log("inside updateHistory");
            const historyData = await this.getLoanHistoryByID(loanID);
            const items = {
                loanID: "HISTORY-" + loanID + "-" + (10000 + historyData.length + Math.floor(Math.random() * 100)),
                interestPaid: interestPaid,
                historyLoanId: loanID,
                date: new Date()
            };
            console.log(new Date());
            const params = {
                TableName: process.env.LOANS_TABLE,
                Item: items
            };
            await docClient.put(params).promise();
            console.log("outside updateHistory");
            return [];
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
}
exports.HistoryService = HistoryService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGlzdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEQsTUFBYSxjQUFjO0lBRXZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBYztRQUMxQyxNQUFNLE1BQU0sR0FBRztZQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7WUFDbEMsZ0JBQWdCLEVBQUUsaUVBQWlFO1lBQ25GLHlCQUF5QixFQUFFO2dCQUMzQixTQUFTLEVBQUUsU0FBUztnQkFDcEIsZ0JBQWdCLEVBQUUsTUFBTTthQUN2QjtZQUNELHdCQUF3QixFQUFFO2dCQUMxQixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsZ0JBQWdCLEVBQUUsZUFBZTthQUNoQztTQUNKLENBQUE7UUFDRCxJQUFJO1lBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sSUFBSSxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDckI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFjLEVBQUUsWUFBb0I7UUFFM0QsSUFBSTtZQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxNQUFNLEtBQUssR0FBRztnQkFDVixNQUFNLEVBQUUsVUFBVSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDbEcsWUFBWSxFQUFFLFlBQVk7Z0JBQzFCLGFBQWEsRUFBRSxNQUFNO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7YUFDbkIsQ0FBQTtZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sTUFBTSxHQUFHO2dCQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7Z0JBQ2xDLElBQUksRUFBRSxLQUFLO2FBQ2QsQ0FBQTtZQUNELE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDckMsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNyQyxPQUFPLElBQUksQ0FBQztTQUNmO0lBQ0wsQ0FBQztDQUNKO0FBbERELHdDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmNvbnN0IGRvY0NsaWVudCA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcblxuZXhwb3J0IGNsYXNzIEhpc3RvcnlTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBhc3luYyBnZXRMb2FuSGlzdG9yeUJ5SUQobG9hbklEOiBzdHJpbmcpe1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkxPQU5TX1RBQkxFLFxuICAgICAgICAgICAgRmlsdGVyRXhwcmVzc2lvbjogJ2JlZ2luc193aXRoKCNsb2FuSUQsIDpsb2FuSUQpIEFuZCAjaGlzdG9yeUxvYW5JZD06aGlzdG9yeUxvYW5JZCcsXG4gICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICAgICAnOmxvYW5JRCc6ICdISVNUT1JZJyxcbiAgICAgICAgICAgICc6aGlzdG9yeUxvYW5JZCc6IGxvYW5JRFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgICAgICAgJyNsb2FuSUQnOiAnbG9hbklEJyxcbiAgICAgICAgICAgICcjaGlzdG9yeUxvYW5JZCc6ICdoaXN0b3J5TG9hbklkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnNpZGUgZ2V0TG9hbnNcIik7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZG9jQ2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm91dFNpZGUgZ2V0bG9hbnNcIiwgZGF0YS5JdGVtcyk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5JdGVtcztcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyB1cGRhdGVIaXN0b3J5KGxvYW5JRDogc3RyaW5nLCBpbnRlcmVzdFBhaWQ6IG51bWJlcil7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5zaWRlIHVwZGF0ZUhpc3RvcnlcIik7XG4gICAgICAgICAgICBjb25zdCBoaXN0b3J5RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TG9hbkhpc3RvcnlCeUlEKGxvYW5JRCk7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHtcbiAgICAgICAgICAgICAgICBsb2FuSUQ6IFwiSElTVE9SWS1cIiArIGxvYW5JRCArIFwiLVwiICsgKDEwMDAwICsgaGlzdG9yeURhdGEubGVuZ3RoICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKSksXG4gICAgICAgICAgICAgICAgaW50ZXJlc3RQYWlkOiBpbnRlcmVzdFBhaWQsXG4gICAgICAgICAgICAgICAgaGlzdG9yeUxvYW5JZDogbG9hbklELFxuICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ldyBEYXRlKCkpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuTE9BTlNfVEFCTEUsXG4gICAgICAgICAgICAgICAgSXRlbTogaXRlbXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IGRvY0NsaWVudC5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm91dHNpZGUgdXBkYXRlSGlzdG9yeVwiKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=