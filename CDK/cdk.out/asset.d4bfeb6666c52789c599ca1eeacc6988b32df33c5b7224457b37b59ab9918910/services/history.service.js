"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryService = void 0;
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
class HistoryService {
    static async getLoanHistoryByID(loanID) {
        const params = {
            TableName: process.env.LOANS_TABLE,
            FilterExpression: 'begins_with(#loanID, :loanID) And #historyLoanId=:historyLoanId',
            ExpressionAttributeValues: {
                ':loanID': 'HISTORY',
                ':historyLoanId': loanID
            },
            ExpressionAttributeNames: {
                '#loanID': 'loanID',
                '#historyLoanId': 'historyLoanId'
            },
        };
        try {
            console.log("inside getLoans");
            const data = await docClient.scan(params).promise();
            console.log("outSide getloans", data.Items);
            return data.Items;
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
    static async updateHistory(loanID, interestPaid) {
        try {
            console.log("inside updateHistory");
            const historyData = await this.getLoanHistoryByID(loanID);
            const items = {
                loanID: "HISTORY-" + (10000 + historyData.length + Math.floor(Math.random() * 100)),
                interestPaid: interestPaid,
                historyLoanId: loanID,
                date: new Date()
            };
            const params = {
                TableName: process.env.LOANS_TABLE,
                Item: items
            };
            await docClient.put(params).promise();
            console.log("outside updateHistory");
            return [];
        }
        catch (err) {
            console.log('DynamoDB error: ', err);
            return null;
        }
    }
}
exports.HistoryService = HistoryService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGlzdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEQsTUFBYSxjQUFjO0lBRXZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsTUFBYztRQUMxQyxNQUFNLE1BQU0sR0FBRztZQUNYLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVc7WUFDbEMsZ0JBQWdCLEVBQUUsaUVBQWlFO1lBQ25GLHlCQUF5QixFQUFFO2dCQUMzQixTQUFTLEVBQUUsU0FBUztnQkFDcEIsZ0JBQWdCLEVBQUUsTUFBTTthQUN2QjtZQUNELHdCQUF3QixFQUFFO2dCQUMxQixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsZ0JBQWdCLEVBQUUsZUFBZTthQUNoQztTQUNKLENBQUE7UUFDRCxJQUFJO1lBQ0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sSUFBSSxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDckI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFjLEVBQUUsWUFBb0I7UUFFM0QsSUFBSTtZQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRCxNQUFNLEtBQUssR0FBRztnQkFDVixNQUFNLEVBQUUsVUFBVSxHQUFFLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ2xGLFlBQVksRUFBRSxZQUFZO2dCQUMxQixhQUFhLEVBQUUsTUFBTTtnQkFDckIsSUFBSSxFQUFFLElBQUksSUFBSSxFQUFFO2FBQ25CLENBQUE7WUFDRCxNQUFNLE1BQU0sR0FBRztnQkFDWCxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO2dCQUNsQyxJQUFJLEVBQUUsS0FBSzthQUNkLENBQUE7WUFDRCxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7Q0FDSjtBQWpERCx3Q0FpREMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5U2VydmljZSB7XG5cbiAgICBzdGF0aWMgYXN5bmMgZ2V0TG9hbkhpc3RvcnlCeUlEKGxvYW5JRDogc3RyaW5nKXtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5MT0FOU19UQUJMRSxcbiAgICAgICAgICAgIEZpbHRlckV4cHJlc3Npb246ICdiZWdpbnNfd2l0aCgjbG9hbklELCA6bG9hbklEKSBBbmQgI2hpc3RvcnlMb2FuSWQ9Omhpc3RvcnlMb2FuSWQnLFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICAgICAgJzpsb2FuSUQnOiAnSElTVE9SWScsXG4gICAgICAgICAgICAnOmhpc3RvcnlMb2FuSWQnOiBsb2FuSURcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHtcbiAgICAgICAgICAgICcjbG9hbklEJzogJ2xvYW5JRCcsXG4gICAgICAgICAgICAnI2hpc3RvcnlMb2FuSWQnOiAnaGlzdG9yeUxvYW5JZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaW5zaWRlIGdldExvYW5zXCIpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY0NsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJvdXRTaWRlIGdldGxvYW5zXCIsIGRhdGEuSXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuSXRlbXM7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdXBkYXRlSGlzdG9yeShsb2FuSUQ6IHN0cmluZywgaW50ZXJlc3RQYWlkOiBudW1iZXIpe1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImluc2lkZSB1cGRhdGVIaXN0b3J5XCIpO1xuICAgICAgICAgICAgY29uc3QgaGlzdG9yeURhdGEgPSBhd2FpdCB0aGlzLmdldExvYW5IaXN0b3J5QnlJRChsb2FuSUQpO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSB7XG4gICAgICAgICAgICAgICAgbG9hbklEOiBcIkhJU1RPUlktXCIrICgxMDAwMCArIGhpc3RvcnlEYXRhLmxlbmd0aCArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpLFxuICAgICAgICAgICAgICAgIGludGVyZXN0UGFpZDogaW50ZXJlc3RQYWlkLFxuICAgICAgICAgICAgICAgIGhpc3RvcnlMb2FuSWQ6IGxvYW5JRCxcbiAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5MT0FOU19UQUJMRSxcbiAgICAgICAgICAgICAgICBJdGVtOiBpdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib3V0c2lkZSB1cGRhdGVIaXN0b3J5XCIpO1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEeW5hbW9EQiBlcnJvcjogJywgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==